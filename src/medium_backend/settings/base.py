"""
Django settings for medium_backend project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
# 070224, Wednesday, 03.00 pm 


############################ Path and Env 

from pathlib import Path

import environ
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.

# this effectively pointing to the SRC dir where the manage.py file is located. 
ROOT_DIR = Path(__file__).resolve().parent.parent.parent
# print(ROOT_DIR)

# all the apps dir 
APP_DIR = ROOT_DIR / 'core_apps'

DEBUG = env.bool('DJANGO_DEBUG', False)

############################ 

# TODO remove the force script for normal application. this is being used as I am developing 
# the project in AWS EC2 instance. 
# Also remove the script in case of deployment. 
# this is for development only to access the dev project on EC2 server. 
#CHECK:  use this only when checking in local dev, not while creating docker containers. 

FORCE_SCRIPT_NAME = "/proxy/8000"


############################ Application Definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites", 
]

THIRD_PARTY_APPS = [
    "rest_framework", 
    "django_filters", 
    "django_countries", 
    "phonenumber_field", 
    "drf_yasg", 
    "corsheaders", 
]

LOCAL_APPS = [
    "core_apps.profiles", 
    "core_apps.common", 
    "core_apps.users", 
]

# installed apps 
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS 

###########################





############################ Middleware and Templates and Root URL Conf 

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware", # cors middleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "medium_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

############################ 





############################ Server, Database, Password Hashers(argon2-cffi) and Django Password Validators 

WSGI_APPLICATION = "medium_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# TODO set to postgres database in docker container build 

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ROOT_DIR / "db.sqlite3",  # mydatabase 
    }
}

'''
# Database 
DATABASES = {
    "default": env.db("DATABASE_URL")
}
'''
# Password Hashers (argon2-cffi)
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

############################ 






############################ Timezone Static and Meidafiles  

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_TZ = True

SITE_ID = 1 

ADMIN_URL = "adminpanel/" # make it not guessable    



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = str(ROOT_DIR / "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = str(ROOT_DIR / "mediafiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


############################ 




############################ CORS And Others 

CORS_URLS_REGEX = r"^api/.*$"

AUTH_USER_MODEL = "users.CustomUser"

LOGGING = {
    "version": 1, 
    "disable_existing_loggers": False, 
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(name)-12s %(asctime)s %(module)s  %(process)d %(thread)d %(message)s "
            }
    },
    "handlers": {
        "console": {
            "level": "DEBUG", 
            "class": "logging.StreamHandler", 
            "formatter": "verbose", 
        }
    },
    "root": {
        "level": "INFO", 
        "handlers": ["console"], 
    }
}



